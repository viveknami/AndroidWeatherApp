package com.example.displaycontroller.controller;

import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.example.datacontroller.controller.WeatherDataController;
import com.example.datacontroller.controller.WeatherDataController.CurrentWeatherEventListener;
import com.example.displaycontroller.model.CityLab;
import com.example.displaycontroller.model.WeatherData;

import com.example.simpleweatherapp.R;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class CurrentWeatherFragment extends Fragment {

	private TextView mCity;
	private TextView mTemp;
	private TextView mCondition;
	private TextView mPressure;
	private TextView mHumidity;
	private TextView mLastUpdated;
	private ImageView mWeatherIcon;

	private WeatherDataController mWeatherClient;
	private String mCityName;
	private ProgressDialog mDialog;
	private FragmentStatePagerAdapter mPagerAdp;
	private WeatherUpdateReceiver mReceiver;
	private WeatherData mData;
	private GetWeatherIcon mLoadIconAsync = null;
	private WeatherUpdateListnerInterafce mWeatherListner = null;

	public CurrentWeatherFragment(String city,
			FragmentStatePagerAdapter pagerAdp) {
		mCityName = city;
		this.mPagerAdp = pagerAdp;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setRetainInstance(true);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.new_current_weather,
				container, false);
		mCity = (TextView) rootView.findViewById(R.id.city);
		mTemp = (TextView) rootView.findViewById(R.id.temp);
		mCondition = (TextView) rootView.findViewById(R.id.condition);
		mPressure = (TextView) rootView.findViewById(R.id.pressure);
		mHumidity = (TextView) rootView.findViewById(R.id.humidity);
		mLastUpdated = (TextView) rootView.findViewById(R.id.lastUpdate);
		mWeatherIcon = (ImageView) rootView.findViewById(R.id.weather_icon);
		return rootView;
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mWeatherClient = WeatherDataController.getInstance(getActivity()
				.getApplicationContext());
		
		mWeatherListner = new WeatherUpdateListnerInterafce();

		IntentFilter filter = new IntentFilter(
				WeatherDataController.WEATHER_UPDATE_EVENT);
		mReceiver = new WeatherUpdateReceiver();
		getActivity().registerReceiver(mReceiver, filter);
	}

	@Override
	public void onStart() {
		super.onStart();
		refreshForecast();
	}

	@Override
	public void onStop() {
		super.onStop();
		
		if (mDialog != null) {
			mDialog.dismiss();
		}
		
		mWeatherListner = null;
		getActivity().unregisterReceiver(mReceiver);   
	}

	@Override
	public void onDestroy() {
		
		if (mLoadIconAsync != null) {
			mLoadIconAsync.cancel(true);
		}
		super.onDestroy();
	}

	private void refreshForecast() {

		WeakReference<CurrentWeatherEventListener> weakWeatherListner = new WeakReference<CurrentWeatherEventListener> (mWeatherListner);
		
		WeatherData data = mWeatherClient.getWeatherData(mCityName, weakWeatherListner);

		if (data != null) {
			updateViewField(data);
		} else {
			mDialog = new ProgressDialog(getActivity());
			mDialog.setMessage("Loading Weather Data. Please wait...");
			mDialog.show();
		}

	}

	private void updateViewField(WeatherData data) {

		mData = data;
		mCity.setText(data.location.getCity());
		mTemp.setText(data.temperature.getTemp() + " \u2109");
		mCondition.setText("Condition: " + data.currentCondition.getWeather());
		mPressure.setText("Pressure: " + data.currentCondition.getPressure());
		mHumidity.setText("Humidity: " + data.currentCondition.getHumidity());

		mWeatherIcon.setImageBitmap(data.getIconBitmap());

		SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(Long.parseLong(data.getLastUpdate()));

		mLastUpdated.setText(formatter.format(calendar.getTime()));

		mLoadIconAsync = new GetWeatherIcon();
		mLoadIconAsync.execute();

	}

	private class GetWeatherIcon extends AsyncTask<Void, Void, Boolean> {
		@Override
		protected void onPreExecute() {
			super.onPreExecute();
		}

		@Override
		protected Boolean doInBackground(Void... params) {

			Bitmap bitmap = null;
			try {
				bitmap = BitmapFactory.decodeStream((InputStream) new URL(
						mData.currentCondition.getIconUrl()).getContent());
			} catch (MalformedURLException e) {
				e.printStackTrace();
				return false;
			} catch (IOException e) {
				e.printStackTrace();
				return false;
			}

			mData.setIconBitmap(bitmap);
			return true;

		}

		@Override
		protected void onPostExecute(Boolean result) {
			super.onPostExecute(result);

			if (this.isCancelled())
				return;

			mWeatherIcon.setImageBitmap(mData.getIconBitmap());
		}
	}

	private class WeatherUpdateListnerInterafce implements
			WeatherDataController.CurrentWeatherEventListener {
		@Override
		public void onWeatherRetrieved(WeatherData data) {

			if (getActivity() != null) {

				updateViewField(data);
				if (mDialog != null) {
					mDialog.dismiss();
				}
			}

		}

		@Override
		public void onWeatherError(final String errorStr) {
			Log.d("Vivek", "onWeatherError: city name " + mCityName);

			if (getActivity() != null) {

				// Must be a bad city name hence remove from
				// city list
				if (mDialog != null) {
					mDialog.dismiss();
				}
				Toast.makeText(getActivity(), errorStr, Toast.LENGTH_LONG)
						.show();

				CityLab.getInstance(getActivity().getApplicationContext())
						.removeCity(mCityName);

				mPagerAdp.notifyDataSetChanged();

			}

		}

		@Override
		public void onConnectionError() {
			Log.d("Vivek", "onConnectionError: city name " + mCityName);

			if (getActivity() != null) {
				Toast.makeText(getActivity(),
						getActivity().getString(R.string.place_not_found),
						Toast.LENGTH_LONG).show();
				if (mDialog != null) {
					mDialog.dismiss();
				}
			}
		}
	}

	private class WeatherUpdateReceiver extends BroadcastReceiver {

		@Override
		public void onReceive(Context context, Intent intent) {

			Log.d("Vivek", "OnReceive WeatherUpdateReceiver is called");

			WeatherData data = (WeatherData) intent
					.getSerializableExtra("WeatherData");
			String city_name = intent.getStringExtra("CityName");
			Boolean isBadCity = intent.getBooleanExtra("BadCity", false);
			Boolean isConnectionError = intent.getBooleanExtra(
					"ConnectionError", false);

			if (!city_name.equals(mCityName)) {
				return;
			}

			if (mDialog != null) {
				mDialog.dismiss();
			}

			if (isBadCity) {
				if (getActivity() != null) {

					// Must be a bad city name hence remove from
					// city list
					Toast.makeText(getActivity(), R.string.bad_city,
							Toast.LENGTH_LONG).show();

					CityLab.getInstance(getActivity().getApplicationContext())
							.removeCity(mCityName);

					mPagerAdp.notifyDataSetChanged();

				}
			} else if (isConnectionError) {

				Toast.makeText(getActivity(),
						getActivity().getString(R.string.place_not_found),
						Toast.LENGTH_LONG).show();
			} else {
				if (data != null) {
					updateViewField(data);
				}

			}

		}

	}
}
