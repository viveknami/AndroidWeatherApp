package com.example.weatherservice;

import com.example.model.WeatherData;
import com.example.remoteclient.WeatherClient;

import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Binder;
import android.os.IBinder;
import android.util.Log;

/*****************test code *******************************************
This is a pure bounded definite service which start i


We can start this service from outside using this code:

Intent intent= new Intent(this, WeatherNonStopService.class);  // call this at onResume()
intent.putExtra("city_name", city_name);
bindService(intent, mConnection,Context.BIND_AUTO_CREATE);

where "mConnection" is:

private ServiceConnection mConnection = new ServiceConnection() {

	    public void onServiceConnected(ComponentName className, 
	        IBinder binder) {
	      WeatherNonStopService.MyBinder b = (WeatherNonStopService.MyBinder) binder;
	      weatherService = b.getService();
	      
	    }

	    public void onServiceDisconnected(ComponentName className) {
	    	weatherService = null;
	    }
	 };
 

Also we should "unbind()" this bounded service 
 
 unbindService(mConnection);  // Call this as onPause()
 
*****************************************************************/

public class WeatherPureBoundedService extends Service {

	private final IBinder mBinder = new MyBinder();
	private WeatherData data;

	
	@Override
	public IBinder onBind(Intent intent) {
		
		String cityName = intent.getStringExtra("city_name");
		fetchWeatherData(cityName);

		return mBinder;
	}

	public class MyBinder extends Binder {
		public WeatherPureBoundedService getService() {
			return WeatherPureBoundedService.this;
		}
	}

	private void fetchWeatherData(final String city_name)
	{
		//Service by default run on main thread (except IntentService) 
		//hence we should fetch on secondary thread..
		
		new Thread() {
			public void run() {
				WeatherClient client = new WeatherClient(false);
				data = client.remoteWeatherFetch(city_name);
				Log.d("Vivek", "WeatherPureBoundedService: weather_cond" + data.currentCondition.getWeather());
			}
		}.start();

	}

	public WeatherData getWeatheData()  {
		return data;
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		Log.d("Vivek", "WeatherPureBoundedService is destroyed");
	}
}

